A baseball players batting average is calculated by the following formula:

BA = (number of hits) / (number of official at-bats)
Batting averages are always expressed rounded to the nearest thousandth with no leading zero. The top 3 MLB batting averages of all-time are:

Ty Cobb .366
Rogers Hornsby .358
Shoeless Joe Jackson .356
The given array represents a season of games. Each array item indicates a players [hits, official at bats] per game. Return a string with the players seasonal batting average rounded to the nearest thousandth.

Examples
battingAvg([[0, 0], [1, 3], [2, 2], [0, 4], [1, 5]]) ➞ ".286"

battingAvg([[2, 5], [2, 3], [0, 3], [1, 5], [2, 4]]) ➞ ".350"

battingAvg([[2, 3], [1, 5], [2, 4], [1, 5], [0, 5]]) ➞ ".273"


SOLUTION
function battingAvg(arr) {
  let hits = 0;
  let chances = 0;

  for (let i of arr) {
    hits += i[0];
    chances += i[1];
  }

  let avg = hits / chances;
  let roundedAvg = avg.toFixed(3); // Round to three decimal places

  if (roundedAvg === "1.000") {
    return "1.000";
  } else {
    return roundedAvg.slice(1); // Remove leading zero and return as string
  }
}


QUESTION 2
Find Number of Digits in Number
Create a function that will return an integer number corresponding to the amount of digits in the given integer num.

Examples
num_of_digits(1000) ➞ 4

num_of_digits(12) ➞ 2

num_of_digits(1305981031) ➞ 10

num_of_digits(0) ➞ 1
Notes
Try to solve this challenge without using strings!

SOLUTION 2
function num_of_digits(num) {
  if (num === 0) {
    return 1; // Special case for zero
  }

  let count = 0;
  let absNum = Math.abs(num);

  if (absNum < 1) {
    absNum = 1 / absNum;
  }

  while (absNum >= 1) {
    absNum /= 10;
    count++;
  }

  QUESTION 3
  Oddish vs. Evenish
Create a function that determines whether a number is Oddish or Evenish. A number is Oddish if the sum of all of its digits is odd, and a number is Evenish if the sum of all of its digits is even. If a number is Oddish, return "Oddish". Otherwise, return "Evenish".

For example, oddishOrEvenish(121) should return "Evenish", since 1 + 2 + 1 = 4. oddishOrEvenish(41) should return "Oddish", since 4 + 1 = 5.

Examples
oddishOrEvenish(43) ➞ "Oddish"
// 4 + 3 = 7
// 7 % 2 = 1

oddishOrEvenish(373) ➞ "Oddish"
// 3 + 7 + 3 = 13
// 13 % 2 = 1

oddishOrEvenish(4433) ➞ "Evenish"
// 4 + 4 + 3 + 3 = 14
// 14 % 2 = 0


SOLUTION
function oddishOrEvenish(num) {
  let sum = 0;
  let digits = num.toString();

  for (let digit of digits) {
    sum += parseInt(digit);
  }

  return sum % 2 === 0 ? "Evenish" : "Oddish";
}

QUESTION 4
Perimeters with a Catch
Write a function that takes a number and returns the perimeter of either a circle or a square. The input will be in the form (letter l, number num) where the letter will be either "s" for square, or "c" for circle, and the number will be the side of the square or the radius of the circle.

Use the following formulas:

Perimeter of a square: 4 * side.
Perimeter of a circle: 6.28 * radius.
The catch is you can only use arithmetic or comparison operators, which means:

No if... else statements.
No objects.
No arrays.
No formatting methods, etc.
The goal is to write a short, branch-free piece of code.

Examples
perimeter("s", 7) ➞ 28

perimeter("c", 4) ➞ 25.12

perimeter("c", 9) ➞ 56.52

SOLUTION
function perimeter(l, num) {
  const isCircle = l === 'c';
  const circlePerimeter = 6.28 * num;
  const squarePerimeter = 4 * num;

  return (isCircle * circlePerimeter) + (!isCircle * squarePerimeter);
}


Question 5
How Much is True?
Create a function which returns the number of true values there are in an array.

Examples
countTrue([true, false, false, true, false]) ➞ 2

countTrue([false, false, false, false]) ➞ 0

countTrue([]) ➞ 0
Notes
Return 0 if given an empty array.
All array items are of the type bool (true or false).

SOLUTION
function countTrue(arr) {
  let count = 0;
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] === true) {
      count++;
    }
  }
  return count;
}


QUESTION 6
Promises III: Native Promise, Introducing the Executor
Promises are just objects that contain the outcome of asynchronous operations. So when do you use one? When you want to control the outcome of an asynchronous operation. All you have to do is wrap the asynchronous function with a promise constructor.

The promise constructor requires you to pass a function called the executor which takes two parameters, resolve and reject. Both are functions that you use to pass or reject a value that is usually the result of the async operation. Here is an example of a simple promise:

let promise = new Promise( (resolve, reject) => {
  setTimeout(( ) => {
     resolve("edabit")
  }, 1000)
})
setTimeout is a browser API that is very commonly used in tutorials to represent async operations. After 1000ms has passed, we call the callback function in setTimeout() and pass a string "edabit" to the resolve function.

Create a simple promise and pass the resolve function a string value of your choice. Use the setTimeout function as your asynchronous operation. Your setTimeout() function should not exceed 1000ms. Store the promise inside a variable named promise.

SOLUTION
let promise = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve("Hello, world!");
  }, 1000);
});


QUESTION 7
Make a Circle with OOP
Your task is to create a Circle constructor that creates a circle with a radius provided by an argument. The circles constructed must have two methods getArea() (PI*r^2) and getPerimeter() (2*PI*r) which give both respective areas and perimeter (circumference).

For help with this class, I have provided you with a Rectangle constructor which you can use as a base example.

Examples
let circy = new Circle(11)
circy.getArea()

// Should return 380.132711084365
let circy = new Circle(4.44)
circy.getPerimeter()

// Should return 27.897342763877365
Notes
Dont worry about floating point precision - Ive factored in the chance that your answer may be more or less accurate than mine. This is more of a tutorial than a challenge so the topic covered may be considered advanced, yet the challenge is more simple - so if this challenge gets labelled as easy, dont worry too much.

SOLUTION
class Circle {
  constructor(radius) {
    this.radius = radius;
  }

  getArea() {
    return Math.PI * this.radius * this.radius;
  }

  getPerimeter() {
    return 2 * Math.PI * this.radius;
  }
}


QUESTION 8
Seven Boom!
Create a function that takes an array of numbers and return "Boom!" if the digit 7 appears in the array. Otherwise, return "there is no 7 in the array".

Examples
sevenBoom([1, 2, 3, 4, 5, 6, 7]) ➞ "Boom!"
// 7 contains the number seven.

sevenBoom([8, 6, 33, 100]) ➞ "there is no 7 in the array"
// None of the items contain 7 within them.

sevenBoom([2, 55, 60, 97, 86]) ➞ "Boom!"
// 97 contains the number seven.

SOLUTION
function sevenBoom(arr) {
  for (let i = 0; i < arr.length; i++) {
    if (String(arr[i]).includes("7")) {
      return "Boom!";
    }
  }
  return "there is no 7 in the array";
}

QUESTION 9
Tower of Hanoi
There are three towers. The objective of the game is to move all the disks over to tower #3, but you cant place a larger disk onto a smaller disk. To play the game or learn more about the Tower of Hanoi, check the Resources tab.

Tower of Hanoi

Create a function that takes a number discs as an argument and returns the minimum amount of steps needed to complete the game.

Examples
towerHanoi(3) ➞ 7

towerHanoi(5) ➞ 31

towerHanoi(0) ➞ 0
Notes
The amount of discs is always a positive integer.
1 disc can be changed per move.

SOLUTION
function towerHanoi(discs) {
  return Math.pow(2, discs) - 1;
}


